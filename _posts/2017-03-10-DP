---
layout: post
title: Hello World
---

교내 스터디에서 진행중인 알고리즘을 정리해보려 시작했다.

다이나믹 프로그래밍
한국말로는 동적 계획법이다.

Where? 경우의 수와 같은 재귀적 함수를 이용해서 해결하는 문제
	재귀적으로 해결해야 하는 문제에 최적화

How?
1.	재귀 관계식을 정리해보자. Ex) F(n) = F(n-1) + F(n-2)
2.	바닥부터 시작해보자. 작은 사례를 먼저 해결하는 것이다.
F(0)=0, F(1)=1, F(2)= F(1)+ F(0)

이렇게 바닥부터 하나씩 저장해서 다음 단계에 사용하는 것이다.
배열을 이용해서 바닥부터 저장을 한다.

[DP_1]

DP 와 Recursion의 차이?
아래부터  혹은  위부터 시작하는 것이다.
접근 방향이 다르기에 메모리 사용방식도 다르다.
가장 바닥부터 저장하기에 중복 없이 메모리를 아낄 수 있다. 
또한 이미 구해진 자료를 이용하는 경우, 불필요한 계산을 줄일 수 있다.

수많은 문제는 DP 를 이용해서 풀 수 있지만
불가능한 경우엔?  Brute-force, Divide & Conquer
